import imaplib
import email
import re
import time
from datetime import datetime
from bs4 import BeautifulSoup

EMAIL = "////"
APP_PASSWORD = "/////"

def log(message):
    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    print(f"{timestamp} {message}")

def extract_text_from_html(html):
    soup = BeautifulSoup(html, "html.parser")
    return soup.get_text()

def check_email_for_alerts():
    alerts = []  # hier sammeln wir die erkannten Aktionen
    try:
        log("üîÑ Verbinde zu Gmail...")
        imap = imaplib.IMAP4_SSL("imap.gmail.com")
        imap.login(EMAIL, APP_PASSWORD)
        imap.select("inbox")

        log("üì• Suche nach ungelesenen E-Mails...")
        status, messages = imap.search(None, 'UNSEEN')

        if status != "OK":
            log("‚ö†Ô∏è Keine E-Mails gefunden oder Fehler beim Abruf.")
            return alerts

        email_ids = messages[0].split()

        if not email_ids:
            log("üì≠ Keine neuen Mails.")
            return alerts

        log(f"üì¨ {len(email_ids)} neue Mail(s) gefunden.")

        for mail_id in email_ids:
            status, msg_data = imap.fetch(mail_id, "(RFC822)")
            if status != "OK":
                log(f"‚ö†Ô∏è Fehler beim Abrufen der Mail-ID {mail_id}")
                continue

            raw_email = msg_data[0][1]
            msg = email.message_from_bytes(raw_email)

            subject = msg["Subject"]
            from_ = msg["From"]
            log(f"‚úâÔ∏è Mail von: {from_}, Betreff: {subject}")

            for part in msg.walk():
                content_type = part.get_content_type()
                if content_type in ["text/plain", "text/html"]:
                    try:
                        body = part.get_payload(decode=True).decode()
                        if content_type == "text/html":
                            body = extract_text_from_html(body)

                        match = re.search(r'{"action":\s*"(LONG|SHORT)"}', body)
                        if match:
                            action = match.group(1).upper()
                            log(f"‚úÖ Neuer Alert erkannt: {action}")
                            alerts.append(action)
                            break
                    except Exception as decode_err:
                        log(f"‚ùó Fehler beim Parsen: {decode_err}")

        imap.logout()
        return alerts

    except Exception as e:
        log(f"‚ùó Fehler beim E-Mail-Check: {e}")
        return alerts
if __name__ == "__main__":
    while True:
        check_email_for_alerts()
        time.sleep(5)
